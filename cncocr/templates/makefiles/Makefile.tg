# This file is subject to the license agreement located in the file LICENSE
# and cannot be distributed without it. This notice cannot be
# removed or modified.

# APPS
APPS_ROOT       ?= $(XSTACK_SRC)/apps
APPS_LIBS_ROOT  ?= $(XSTACK_SRC)/apps/libs/tg

# OCR_TYPE
OCR_TYPE        ?= tg

# TG
TG_INSTALL ?= $(XSTACK_SRC)/ss/install
TG_SRC     ?= $(XSTACK_SRC)/ss

# OCR
XE_TARGET   ?= tg-null-tg-xe
XE_BUILDER  ?= x86-builder-tg-xe
CE_TARGET   ?= tg-null-tg-ce
CE_BUILDER  ?= x86-builder-tg-ce
OCR_INSTALL_ROOT ?= $(XSTACK_SRC)/ocr/install
OCR_SRC     ?= $(XSTACK_SRC)/ocr
OCR_BUILD_ROOT   ?= $(XSTACK_SRC)/ocr/build

# Use lockable OCR config
OCR_CE_CONFIG ?= $(OCR_INSTALL_ROOT)/$(CE_TARGET)/config/ce-multialloc-default-lockable.cfg
OCR_XE_CONFIG ?= $(OCR_INSTALL_ROOT)/$(XE_TARGET)/config/xe-default-lockable.cfg

# APPLICATION
WORKLOAD_SRC          ?= ./cncocr_support/tg_src
WORKLOAD_BUILD_ROOT   ?= ./build
WORKLOAD_INSTALL_ROOT ?= ./install

# You can specify default arguments here. These
# will be overriden by (in order):
#   - the WORKLOAD_ARGS environment variable
#   - the arguments passed to 'make run'
# To restate, the arguments passed to make run have
# the highest priority and will override both the
# default arguments here and the ones passed through
# an environment variable
#WORKLOAD_ARGS ?=

# Run mode (not fully supported)
# Set to "yes" if running with torque
RUN_TORQUE ?= no
# Set to "yes" if Jenkins is running this job as an automated test
RUN_JENKINS ?= no

# Space separated list of source files
SRCS := AllSources.c

## END of variables coming from user/environment

include ${APPS_ROOT}/makefiles/make-pre.inc

# Space separated list of directory names in apps/libs/src
# that need to be built. These will be built for ARCH
REQ_LIBS := libc

# Additional CFLAGS. By default, it includes
# all OCR required includes and apps/libs/<target>/include
# TG_ARCH is also defined for Fsim
#CFLAGS += -I$(OCR_SRC)/build/$(XE_TARGET)
# Additional LDFLAGS. By default, it includes
# the required OCR library path and apps/libs/<target/lib
# Note that none of the specific libraries specified in
# REQ_LIBS are included.
LDFLAGS +=

# Targets:
#   - all:     Build the application.
#   - debug:   Build the debug version of the application
#   - install: Build and install
#   - run:     Run the application
all:	CFLAGS += -O2
all:	TARGETS := all
all:	default

debug:	CFLAGS += -O0
debug:	TARGETS := debug
debug:	default

install: all

# This rule will be executed prior to execution:
#  - For the FSim target, this happens when the binary is built
#  - For all other targets this happens prior to running the
#    executable
# WORKLOAD_ARGS and WORKLOAD_INPUTS are available
# to you and contain, respectively, the non file
# arguments and the file arguments. They will be
# passed directly to the application unless you
# modify them. You can use the following
# syntax to do so:
# $(eval WORKLOAD_INPUTS := something) or
# $(eval WORKLOAD_INPUTS := $(shell <script>))
# The second syntax will execute <script> and assign
# its output to WORKLOAD_INPUTS
#
# You may also want to assign a value to WORKLOAD_OUTS
# which should contain the list of output files produced
# by the application (to be passed to postrun). This is
# taken-care of for you on FSim but not on any of the
# other platforms.
# 'prerun: ;' is an empty rule (the rule is required)
.PHONY: prerun
prerun: ;

# This rule will be executed after execution
# The variable ${WORKLOAD_OUTS} contains a space separated
# list of output files
# 'postrun: ;' is an empty rule (the rule is required)
.PHONY: postrun
postrun: ;

# Any additional rules required can go here

# Include common part
include ${APPS_ROOT}/makefiles/make-tg.inc

