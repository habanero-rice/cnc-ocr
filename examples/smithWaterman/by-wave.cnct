////////////////////////////////////////////////////////////////////////////////
// Wavefront-based tuning
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
// item collection distributions

[ above : i, j ] : { (((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) <= $RANKS) ? ((i + j + 1) < #ntw ? i : (#ntw - (j + 1))) : (((i + j + 1) < #ntw) ? ((i > ((((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) % $RANKS) * ((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) / $RANKS)) + ((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) % $RANKS))) ? ((i - ((((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) % $RANKS) * ((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) / $RANKS)) + ((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) % $RANKS))) / ((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) / $RANKS)) + ((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) % $RANKS) : i / (((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) / $RANKS) + 1)) : (((#ntw - (j + 1)) > ((((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) % $RANKS) * ((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) / $RANKS)) + ((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) % $RANKS))) ? (((#ntw - (j + 1)) - ((((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) % $RANKS) * ((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) / $RANKS)) + ((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) % $RANKS))) / ((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) / $RANKS)) + ((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) % $RANKS) : (#ntw - (j + 1)) / (((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) / $RANKS) + 1)))) % $RANKS };    // Last row of tile above
[ left  : i, j ] : { (((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) <= $RANKS) ? ((i + j + 1) < #ntw ? i : (#ntw - (j + 1))) : (((i + j + 1) < #ntw) ? ((i > ((((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) % $RANKS) * ((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) / $RANKS)) + ((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) % $RANKS))) ? ((i - ((((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) % $RANKS) * ((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) / $RANKS)) + ((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) % $RANKS))) / ((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) / $RANKS)) + ((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) % $RANKS) : i / (((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) / $RANKS) + 1)) : (((#ntw - (j + 1)) > ((((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) % $RANKS) * ((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) / $RANKS)) + ((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) % $RANKS))) ? (((#ntw - (j + 1)) - ((((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) % $RANKS) * ((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) / $RANKS)) + ((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) % $RANKS))) / ((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) / $RANKS)) + ((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) % $RANKS) : (#ntw - (j + 1)) / (((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) / $RANKS) + 1)))) % $RANKS };    // Last column of tile to the left

////////////////////////////////////////////////////////////////////////////////
// compute group distributions

( initAboveStep : tw, ntw ): { HCMPI_COMM_RANK };
( initLeftStep  : th, nth ): { HCMPI_COMM_RANK };
( swStep        :  i,   j ): { (((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) <= $RANKS) ? ((i + j + 1) < #ntw ? i : (#ntw - (j + 1))) : (((i + j + 1) < #ntw) ? ((i > ((((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) % $RANKS) * ((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) / $RANKS)) + ((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) % $RANKS))) ? ((i - ((((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) % $RANKS) * ((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) / $RANKS)) + ((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) % $RANKS))) / ((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) / $RANKS)) + ((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) % $RANKS) : i / (((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) / $RANKS) + 1)) : (((#ntw - (j + 1)) > ((((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) % $RANKS) * ((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) / $RANKS)) + ((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) % $RANKS))) ? (((#ntw - (j + 1)) - ((((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) % $RANKS) * ((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) / $RANKS)) + ((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) % $RANKS))) / ((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) / $RANKS)) + ((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) % $RANKS) : (#ntw - (j + 1)) / (((((i + j + 1) < #ntw) ? (i + j + 1) : ((i + j + 1) - (((i + j + 1) - #ntw) * 2))) / $RANKS) + 1)))) };


////////////////////////////////////////////////////////////////////////////////
// compute group affinities

( $INIT: () ) ->
    ( initAboveStep: #tw, #ntw ),
    ( initLeftStep: #th, #nth ),
    ( swStep: $RANGE(0, #nth), $RANGE(0, #ntw) );

